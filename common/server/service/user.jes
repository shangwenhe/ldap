/**
 * @file: user.jes
 * @author: shangwenhe@itv.baidu.com
 * @date: 2017-04-11
 * @description: this is a <jes> file
 */
/* eslint-disable */
import * as actived from '../model/';
import async from 'async';

class serviceUser {

    /**
     * @param username 用户名
     * @param groupname 新增用户所属组
     * @callback  添加用户是否成功回调
     */
    addUserForGroup(username, groupname, body, callback) {
        // 添加用户
        async.waterfall([
            (callback) => {
                // 验证组是否存在 
                actived.modelGroupQuery.name(groupname, callback)
            }, (groups, callback) => {
                let group = groups.groups[0];
                // 验证组内是否存在当前用户
                actived.modelUserQuery.fromGroup(username, group.dn, function(err, info) {
                    if (info) {
                        info.errno = 40406;
                        info.msg = 'user exist';
                    }
                    // 交换变量，如果用户不存在时则添加
                    callback(info, groups.groups);
                })
            }, (data, callback) => {

                actived.modelUserAdd.forGroup(username, data[0]['dn'], body, callback)
                    // 用户不存在则添加用户
                    //callback(null, {
                    //    info: 'adduser'
                    //})
            }
        ], callback)
    }

    /**
     * @param username 用户名
     * @param groupname 用户所属组
     * @callback  删除用户是否成功回调
     */
    delUserForGroup(username, groupname, callback) {
    
        async.waterfall([
            (callback) => {
                // 验证组是否存在 
                actived.modelGroupQuery.name(groupname, callback)
            }, (groups, callback) => {
                let group = groups.groups[0];
                // 验证组内是否存在当前用户
                actived.modelUserQuery.fromGroup(username, group.dn, function(err, info) {
                    if (err) {
                        callback({
                            errno: 40412,
                            msg: 'find user error'
                        });
                        return;
                    }
                    if (!info) {
                        callback({
                            errno: 40411,
                            msg: 'user no-exist'
                        });
                        return;
                    }
                    callback(err, info['users'][0]);
                })
            }, (data, callback) => {
                actived.modelUserDelete.samid(data, callback);
            }], callback );
    
    
    }
    /**
     * @param samid 通过唯一的samid删除用户
     * @callback  删除用户是否成功回调
     */
    delUserBySamid(samid, callback) {
        async.waterfall([
            (callback) => {
                actived.modelUserQuery.fromRoot(samid, function(err, info){
                    if(!info){
                        callback({
                            errno: 40407,
                            msg: 'user no-exist'
                        });
                        return;
                    }
                    callback(err, info);
                });
            },
            (userinfo, callback) =>{
                actived.modelUserDelete.samid(userinfo, callback);
            }
        ], callback );
    }
    /**
     * @param username 用户名
     * @param body 用户认证的相关信息
     * @param body.username
     * @param body.password
     * @param body.remember
     * @callback  用户认证是否成功回调
     */
    authen(username, body, callback){
        async.waterfall([
            (callback) => {
                actived.modelUserQuery.fromRoot(username, function(err, info) {
                    if (!info) {
                        callback({
                            errno: 40407,
                            msg: 'user no-exist'
                        });
                        return;
                    }
                    callback(err, info);
                });
            }, (userinfo, callback) => {
                actived.modelUserQuery.authen(username, body.password, function(err, info){
                    if(err){
                        callback(err);
                        return;
                    }
                    let { cn, dept, displayName, mail } = userinfo;
                    callback(null, Object.assign({}, info, {
                        info: {
                            cn, dept, displayName, mail
                        }
                    }))
                });
            }
        ], callback)
    }
    /**
     *
     */
    modifyByname(username, groupname, userinfo, callback){
        async.waterfall([
            (callback) => {
                // 验证组是否存在 
                actived.modelGroupQuery.name(groupname, function(err, group){
                    if(err){
                        callback(err)
                        return;
                    } 
                    callback(err, group['groups'][0]);
                })
            },
            (group, callback) => {
                actived.modelUserQuery.fromGroup(username, group.dn, function(err, user){
                    if(err){
                        callback(err)
                        return;
                    } 
                    callback(err, user['users'][0]);
                });
            },
            (user, callback)=>{
                actived.modelUserModify.forDn(user['dn'], userinfo, callback)
            }
        ], callback);
    }
    groupUserList(groupname, callback){
        async.waterfall([
            (callback) => {
                // 验证组是否存在 
                actived.modelGroupQuery.name(groupname, function(err, group){
                    if(err){
                        callback(err)
                        return;
                    } 
                    callback(err, group['groups'][0]);
                })
            },
            (group, callback) => {
                
                /**
                 * @desc 查找组内的所有用户
                 */
                actived.modelUserQuery.userList(group['dn'], callback);
            }
            ],callback)
    
    } 
     

}

export default new serviceUser;

/* eslint-enable */
